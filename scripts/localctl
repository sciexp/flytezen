#!/usr/bin/env bash

VERBOSE=0

for arg in "$@"; do
    case $arg in
        -v|--verbose)
            VERBOSE=1
            shift
            ;;
        *)
            # defer to argument parser
            # see end of this script
            ;;
    esac
done

if [ "$VERBOSE" -eq 1 ]; then
    set -x
fi

set -e
set -u
set -o pipefail

command_exists() {
    type "$1" &> /dev/null
}

install_docker_linux() {
    if command_exists apt-get; then
        sudo apt-get update
        sudo apt-get install -y docker.io
    else
        echo "Package manager apt-get not found. Please install Docker manually."
        exit 1
    fi
}

install_docker_mac() {
    if command_exists brew; then
        brew install --cask docker
    else
        echo "Homebrew not found. Please install Docker manually."
        exit 1
    fi
}


display_info() {
    cat << EOF

🔍 Current status of Flyte Sandbox container:
$($CONTAINER_CMD container ls --filter name=flyte-sandbox)

🔍 Current status of Flyte Sandbox volume:
$($CONTAINER_CMD volume ls --filter name=flyte-sandbox)

🔍 Detailed information on Flyte Sandbox volume:
$($CONTAINER_CMD volume inspect flyte-sandbox || true)

🔍 Browse Flyte Sandbox volume from another image:

    $CONTAINER_CMD run --rm -it -v flyte-sandbox:/data nixery.dev/shell/which/bat/less/tree bash

📒️ To check the logs:

    $CONTAINER_CMD logs -f flyte-sandbox

🕸  Cluster services:

    localhost:6443  | Kubernetes API Server
    localhost:30080 | HTTP
    localhost:30000 | Container Registry
    localhost:30001 | PostgreSQL Database
    localhost:30002 | Minio API
    localhost:30003 | BuildKit 

see /kubernetes-dashboard /console /minio/{login,browser} routes at HTTP port

🖥  The Kubernetes Dashboard should be available at http://localhost:30080/kubernetes-dashboard
🖥  The Flyte UI should be available at http://localhost:30080/console

🐋 The Flyte sandbox ships with a Docker registry.
🐋 Tag and push custom workflow images to localhost:30000

📂 The local S3 server provided by the Minio API is hosted on localhost:30002.
📂 Use http://localhost:30080/minio/login to access the Minio console

    username: minio
    password: miniostorage

🌐️ Export demo environment variables for using flytectl
🌐️ Export kubeconfig variables for accessing the local cluster's API server

export FLYTECTL_CONFIG=$HOME/.flyte/config-sandbox.yaml
export KUBECONFIG=\$KUBECONFIG:$HOME/.flyte/sandbox/kubeconfig

EOF
}


start_sandbox() {
    echo "Setting up the Flyte Sandbox..."
    # Pin version with sha256 tags from
    # https://github.com/flyteorg/flyte/pkgs/container/flyte-sandbox-bundled
    # tag=sha-fa49d3bfcdc081328e2f1514fd513ec46fdbf734
    # see Dockerfile for more details
    # https://github.com/flyteorg/flyte/blob/master/docker/sandbox-bundled/Dockerfile
    # master@712ee8edd60d9b9494a392da7a7b1726bfb24896
    FLYTE_SANDBOX_IMAGE="cr.flyte.org/flyteorg/flyte-sandbox-bundled:latest"
    $CONTAINER_CMD container rm flyte-sandbox --force
    $CONTAINER_CMD volume create flyte-sandbox
    $CONTAINER_CMD pull $FLYTE_SANDBOX_IMAGE

    # see /console /kubernetes-dashboard /minio/{login,browser} routes at HTTP port
    # see print statements in display_info for minio credentials
    # localhost:6443  | Kubernetes API Server
    # localhost:30080 | HTTP
    # localhost:30000 | Container Registry
    # localhost:30001 | PostgreSQL Database
    # localhost:30002 | Minio API
    # localhost:30003 | BuildKit 
    $CONTAINER_CMD create \
        --privileged \
        -p 0.0.0.0:6443:6443 \
        -p 0.0.0.0:30080:30080 \
        -p 0.0.0.0:30000:30000 \
        -p 0.0.0.0:30001:30001 \
        -p 0.0.0.0:30002:30002 \
        -p 0.0.0.0:30003:30003 \
        --env SANDBOX=1 \
        --env KUBERNETES_API_PORT=30086 \
        --env FLYTE_HOST=localhost:30081 \
        --env FLYTE_AWS_ENDPOINT=http://localhost:30084 \
        --env K3S_KUBECONFIG_OUTPUT=/var/lib/flyte/config/kubeconfig \
        --mount type=bind,source="$HOME"/.flyte,target=/etc/rancher/ \
        --mount type=bind,source="$HOME"/.flyte/sandbox,target=/var/lib/flyte/config \
        --mount type=volume,source=flyte-sandbox,target=/var/lib/flyte/storage \
        --name flyte-sandbox \
        $FLYTE_SANDBOX_IMAGE
    $CONTAINER_CMD start flyte-sandbox
    display_info
    echo "Flyte Sandbox started successfully."
}

stop_sandbox() {
    echo "Stopping Flyte Sandbox..."
    $CONTAINER_CMD stop flyte-sandbox
    $CONTAINER_CMD container rm flyte-sandbox --force
    echo "Flyte Sandbox stopped."
}

remove_sandbox() {
    echo "Removing Flyte Sandbox data..."
    $CONTAINER_CMD volume rm flyte-sandbox
    echo "Flyte Sandbox data removed."    
}

install_local_bin() {
    echo "Installing localctl...(requires sudo)"
    chmod +x ./localctl
    sudo cp ./localctl /usr/local/bin/localctl
    echo "localctl installed successfully."
}


display_help() {
    cat << EOF

\`localctl\` sets up a local Flyte cluster using the container image built from
the Dockerfile at:
  https://github.com/flyteorg/flyte/pkgs/container/flyte-sandbox-bundled
  https://github.com/flyteorg/flyte/blob/master/docker/sandbox-bundled/Dockerfile

localctl supports a modifiable, development version of a fraction of what is provided
by the \`flytectl demo\` command to manage the lifecycle of a local Flyte cluster.
Please see there for production quality support.

Usage: localctl [options] [command]

Examples:

❯ ./localctl
❯ ./localctl h
❯ ./localctl -v info
❯ ./localctl install  # (opt) requires sudo
❯ localctl start
❯ localctl info
❯ localctl stop
❯ localctl start
❯ localctl -v remove # all data will be lost
❯ localctl start     # clean cluster

Commands:
  start   Start the Flyte cluster
  stop    Stop the Flyte cluster
  remove  Remove Flyte cluster data (stops cluster)
  info    Display Flyte cluster information (alias: i)
  help    Display this help message (alias: h)
  install Install localctl to '/usr/local/bin'
  version Print version information

Options:
  --info    Display Flyte cluster information (alias: -i)
  --help    Display this help message (alias: -h)
  --verbose Enable 'set -x' to print commands (alias: -v)
  --version Print version information

version: $VERSION

EOF
}


VERSION="0.1.0"
readonly VERSION

if command_exists docker; then
    CONTAINER_CMD=docker
elif command_exists podman; then
    CONTAINER_CMD=podman
else
    echo "Neither Docker nor Podman is installed. Attempting to install Docker..."
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        install_docker_linux
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        install_docker_mac
    elif [[ "$OSTYPE" == "msys"* ]]; then
        echo "Please install Docker Desktop for Windows manually."
        exit 1
    fi
    if ! command_exists docker; then
        echo "Failed to install Docker. Exiting..."
        exit 1
    fi
    CONTAINER_CMD=docker
fi

if ! $CONTAINER_CMD --version &> /dev/null; then
    echo "Error with Docker/Podman installation. Exiting..."
    exit 1
fi

# parse arguments
if [ -z "${1-}" ]; then
    display_help
    exit 0
fi

case "$1" in
    start)
        start_sandbox
        ;;
    stop)
        stop_sandbox
        ;;
    remove)
        stop_sandbox
        remove_sandbox
        ;;
    info|i|-i|--info)
        display_info
        ;;
    help|h|-h|--help)
        display_help
        ;;
    install)
        install_local_bin
        ;;
    version|--version)
        echo "$VERSION"
        ;;
    *)
        echo "Invalid command or option set:"
        echo
        echo "    localctl $1"
        echo
        echo "see help below..."
        display_help
        exit 1
        ;;
esac
