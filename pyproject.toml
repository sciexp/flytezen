[tool.poetry]
name = "flytezen"
version = "1.0.1"
packages = [
    { include = "flytezen", from = "src" },
]
description = "Library for benchmarking the impact of transcript count type stratification on trajectory inference."
authors = ["flytezen team"]
readme = "README.md"
homepage = "https://sciexp.github.io/flytezen/"
repository = "https://github.com/sciexp/flytezen"
license = "AGPL-3.0-only"
documentation = "https://sciexp.github.io/flytezen/"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Natural Language :: English",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]

[tool.poetry.urls]
Changelog = "https://github.com/sciexp/flytezen/releases"

[tool.poetry.dependencies]
python = "3.10.13"
dataclasses-json = "0.5.9"
dulwich = "0.21.7"
flytekit = "1.10.2"
fsspec = "2023.9.2"
hydra-zen = "0.11.0"
hydra-joblib-launcher = "1.2.0"
mashumaro = "3.10"
pandas = "1.5.3"
protobuf = "4.24.4"
pyarrow = "14.0.2"
plumbum = "1.8.2"
pyperclip = "1.8.2"
python-dotenv = "1.0.0"
rich = "13.6.0"
scikit-learn = "1.3.2"
scipy = "1.10.1"

# dev dependencies
black = { version = "23.11.0", optional = true, extras = ["jupyter"] }
jupyter_contrib_nbextensions = { version = "0.7.0", optional = true }
jupyterlab = { version = "4.0.9", optional = true }
jupytext = { version = "1.16.0", optional = true }
mkdocs-jupyter = { version = "0.24.6", optional = true }
mkdocs-material = { version = "9.4.14", optional = true }
mkdocstrings = { version = "0.24.0", optional = true }
mkdocstrings-python = { version = "1.7.5", optional = true }
mypy = { version = "1.7.1", optional = true }
notebook = { version = "6.4.13", optional = true }
poethepoet = { version = "0.24.4", optional = true }
pyright = { version = "1.1.336", optional = true }
pytest = { version = "7.4.3", optional = true }
pytest-asyncio = { version = "0.21.1", optional = true }
pytest-cov = { version = "4.1.0", optional = true }
ruff = { version = "0.1.5", optional = true }
xdoctest = { version = "1.1.2", optional = true }

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
black = { version = "23.11.0", extras = ["jupyter"] }
mypy = "1.7.1"
pyright = "1.1.336"
ruff = "0.1.5"
docformatter = { version = ">=1.7.5", extras = ["tomli"] }

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
poethepoet = "0.24.4"
pytest = "7.4.3"
pytest-asyncio = "0.21.1"
pytest-cov = "4.1.0"
xdoctest = "1.1.2"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
jupyter_contrib_nbextensions = "0.7.0"
jupyterlab = "4.0.9"
jupytext = "1.16.0"
mkdocs-jupyter = "0.24.6"
mkdocs-material = "9.4.14"
mkdocstrings = "0.24.0"
mkdocstrings-python = "1.7.5"
notebook = "6.4.13"

[tool.poetry.extras]
docs = [
  "jupyterlab",
  "jupyter_contrib_nbextensions",
  "jupytext",
  "mkdocs-jupyter",
  "mkdocs-material",
  "mkdocstrings",
  "notebook",
 ]

lint = [
  "black",
  "mypy",
  "pyright",
  "ruff",
 ]

test = [
  "poethepoet",
  "pytest",
  "pytest-asyncio",
  "pytest-cov",
  "xdoctest",
 ]

dev = [
  "black",
  "jupytext",
  "jupyter_contrib_nbextensions",
  "mkdocs-jupyter",
  "mkdocs-material",
  "mkdocstrings",
  "mypy",
  "notebook",
  "pyright",
  "pytest",
  "pytest-asyncio",
  "pytest-cov",
  "ruff",
  "xdoctest",
 ]


[tool.black]
target-version = ["py37"]
line-length = 80
skip-string-normalization = true

[tool.docformatter]
black = true
wrap-summaries = 80
wrap-descriptions = 80
recursive = true
in-place = true
diff = true
make-summary-multi-line = true
pre-summary-newline = true

[tool.ruff]
target-version = "py37"
line-length = 80
select = [
  "A",
  # "ARG",
  # "B",
  "C",
  "DTZ",
  # "E",
  "EM",
  # "F",
  # "FBT",
  "F401",
  "I",
  "ICN",
  "ISC",
  # "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  # "S",
  # "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't modify unused imports
  # "F401",
]

[tool.ruff.isort]
known-first-party = ["flytezen"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pyright]
include = ["src"]
exclude = [
       "**/node_modules",
       "**/__pycache__",
       "**/.hypothesis",
       "**/docs",
]
reportUnnecessaryTypeIgnoreComment = true
reportUnnecessaryIsInstance = false

[tool.mypy]
python_version = "3.10"

[[tool.mypy.overrides]]
module = [
  ""
]
ignore_missing_imports = true
warn_unreachable = true
pretty = true
show_column_numbers = true
# show_error_codes = true
show_error_context = true

[tool.conda-lock]
channels = [
    'nodefaults', 
    # 'pytorch',
    # 'nvidia',
    'conda-forge', 
    'bioconda', 
]
platforms = [
    'linux-64',
    # 'linux-aarch64',
    # 'osx-arm64',
    # 'osx-amd64'
]
conda_executor = "mamba"
log_level = "INFO"
virtual_package_spec = "environments/conda/virtual-packages.yml"

[tool.conda-lock.dependencies]
dataclasses-json = {source = "pypi"}
hydra-zen = {source = "pypi"}
hydra-joblib-launcher = {source = "pypi"}
pip = ">=23.2"
poethepoet = {source = "pypi"}

[tool.poe.tasks.conda-lock]
cmd = """
  conda-lock \
  --conda mamba \
  --kind lock \
  --kind env \
  --no-dev-dependencies \
  --filter-categories \
  --category test \
  --virtual-package-spec environments/conda/virtual-packages.yml \
  --filename-template "environments/conda/conda-{platform}.lock" \
  --lockfile environments/conda/conda-lock.yml \
  -f pyproject.toml
"""
help = "Runs conda-lock to generate a conda environment lock file derived from package dependencies."


[tool.poetry.scripts]
flytezen = "flytezen.cli:main"

[tool.pytest.ini_options]
addopts = "-rA --xdoc --cov=src/flytezen/ --cov-report=term-missing"
asyncio_mode = "strict"

[tool.coverage.paths]
flytezen = ["src/flytezen", "*/flytezen/src/flytezen"]
tests = ["tests", "*/flytezen/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.coverage.run]
source_pkgs = ["flytezen", "tests"]
branch = true
parallel = true
omit = [
  "src/flytezen/__init__.py",
  "src/flytezen/__main__.py",
  "tests/conftest.py",
]

[tool.jupytext]
formats = "ipynb,text//py:percent,text//md"

[build-system]
requires = ["poetry-core>=1.6.1"]
build-backend = "poetry.core.masonry.api"
