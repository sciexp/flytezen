name: CI

on:
  push:
    branches:
      - main
    paths-ignore: ["docs/**", "**.md"]
  pull_request:
    branches:
      - main
    types: [opened, synchronize, ready_for_review]
    paths-ignore: ["docs/**", "**.md"]
  
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run with tmate.io debugging enabled"
        required: true
        type: boolean
        default: false
  workflow_call:
    inputs:
      debug_enabled:
        description: "Run with tmate.io debugging enabled"
        required: true
        type: boolean
        default: false

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  setup-flyte-config:
    runs-on: ubuntu-latest
    outputs:
      config-path: ${{ steps.config-output.outputs.path }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create Flyte config from YAML template
      id: yq-process
      uses: mikefarah/yq@master
      with:
        cmd: "yq ea \
                 '.admin.endpoint = strenv(FLYTE_CLUSTER_ENDPOINT) | \
                 .storage.stow.config.project_id = strenv(GCP_PROJECT_ID) | \
                 .storage.stow.config.scopes = strenv(GCP_STORAGE_SCOPES) | \
                 .storage.container = strenv(GCP_STORAGE_CONTAINER)' \
                 config-template.yaml > config.yaml"
      env:
        FLYTE_CLUSTER_ENDPOINT: ${{ secrets.FLYTE_CLUSTER_ENDPOINT }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_STORAGE_SCOPES: ${{ secrets.GCP_STORAGE_SCOPES }}
        GCP_STORAGE_CONTAINER: ${{ secrets.GCP_STORAGE_CONTAINER }}

    - name: Upload Flyte config as an artifact
      id: config-output
      uses: actions/upload-artifact@v2
      with:
        name: flyte-config
        path: config.yaml

    - name: Setup tmate debug session
      if: ${{ github.event.inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3

  deploy:
    needs: setup-flyte-config
    runs-on: ubuntu-latest
    env:
        FLYTECTL_CONFIG: ${{ needs.setup-flyte-config.outputs.config-path }}
        FLYTE_OAUTH_CLIENT_SECRET: ${{ secrets.FLYTE_OAUTH_CLIENT_SECRET }}
        WORKFLOW_PROJECT: ${{ secrets.WORKFLOW_PROJECT }}
        WORKFLOW_DOMAIN: ${{ secrets.WORKFLOW_DOMAIN }}
        WORKFLOW_NAME: ${{ secrets.WORKFLOW_NAME }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Install flytectl
      uses: unionai-oss/flytectl-setup-action@master
      with:
        # https://github.com/flyteorg/flytectl/releases
        version: '0.8.0'
  
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10

    - name: Setup Flytekit
      run: |
          python -m pip install --upgrade pip
          pip install flytekit
          pip list

    - name: Download Flyte config
      uses: actions/download-artifact@v2
      with:
          name: flyte-config
          path: .

    - name: Setup tmate debug session
      if: ${{ github.event.inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
  
    # - name: Register workflow
    #   run: |
    #     flytectl register files \
    #       --project ${{ env.WORKFLOW_PROJECT }} \
    #       --domain ${{ env.WORKFLOW_DOMAIN }} \
    #       --archive workflow.tar.gz \
    #       --version ${{ github.sha }}

    # - name: Execute workflow
    #   id: execute
    #   run: |
    #     set -e
    #     execution_name=$(flytectl create execution \
    #       --project ${{ env.WORKFLOW_PROJECT }} \
    #       --domain ${{ env.WORKFLOW_DOMAIN }} \
    #       ${{ env.WORKFLOW_NAME }} \
    #       --version ${{ github.sha }} -f | jq -r '.id.name')
    #     echo "Execution Name: $execution_name"
    #     echo "execution_name=$execution_name" >> $GITHUB_ENV

    # - name: Stream logs
    #   run: |
    #     set -e
    #     until flytectl get execution \
    #       --project ${{ env.WORKFLOW_PROJECT }} \
    #       --domain ${{ env.WORKFLOW_DOMAIN }} \
    #       ${{ env.execution_name }} \
    #       -o json | jq '.closure.phase' | grep -q 'Succeeded'; do
    #       flytectl get execution \
    #         --project ${{ env.WORKFLOW_PROJECT }} \
    #         --domain ${{ env.WORKFLOW_DOMAIN }} \
    #         ${{ env.execution_name }} -o json | jq '.closure'
    #       sleep 10
    #     done
